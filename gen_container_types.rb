if ARGV.count < 1
    puts 'Pass in the output/input directory followed by any additional input directories'
    exit
end

containers = []

Dir["{#{ARGV.join(',')}}/**/*.h"].each { |file|
    src = File.read(file)
    src.scan(/^\s*?#define\s*?CC_(.*?)\s*?\(.*?\)\s*?CC_CONTAINER\(/).each { |define|
        containers << 'CC_' + define[0]
        containers <<  'CC' + define[0].split('_').map { |s| s.capitalize }.join
    }
}

private_types = []
match = /^[^#\n]*?[^\w]*?(#{containers.join('|')})\((.*?)\)/

Dir["#{ARGV[0]}/**/*.{c,m}"].each { |file|
    src = File.read(file)
    src.scan(match).each { |type|
        if type[0].include? '_'
            container = type[0].split('_').map { |s| s.capitalize }.join
            container = container[0..2].upcase + container[3..-1]
        else
            container = type[0]
        end
        private_types << ["CC_CONTAINER_DECLARE(#{container}, #{type[1]});", type[1].split(',').map { |s| s.strip }]
    }
}

types = []

Dir["{#{ARGV.join(',')}}/**/*.h"].each { |file|
    src = File.read(file)
    src.scan(match).each { |type|
        if type[0].include? '_'
            container = type[0].split('_').map { |s| s.capitalize }.join
            container = container[0..2].upcase + container[3..-1]
        else
            container = type[0]
        end
        types << "CC_CONTAINER_DECLARE(#{container}, #{type[1]});"
    }
    private_types.map { |e|
        e[1].select! { |s| !src.match(/(^|\s)#{s}([^\w]|$)/) }
    }
}

types << private_types.select { |e| e[1].count == 0 }

src = """
//This file is automatically generated, modifications will be lost!
#{types.flatten.uniq.sort.join("\n")}
""".lstrip

File.write("#{ARGV[0]}/ContainerTypes.h", src)
